import { ExportType } from './export-type';
import { Mime } from './mime';
export var MAT_TABLE_EXPORTER = 'mat-table-exporter';
export var TYPE_ARRAY = 'array';
export var CHAR_SET_UTF = ';charset=utf-';
export var CHAR_SET_UTF_8 = CHAR_SET_UTF + '8';
export var CONTENT_TYPE_TEXT = ExportType.TXT + '/';
export var CONTENT_TYPE_APPLICATION = 'application/';
export var CONTENT_TYPE_EXCEL = CONTENT_TYPE_APPLICATION + 'octet-stream';
export var DOT = '.';
export var EXTENSION_XLS = DOT + ExportType.XLS;
export var EXTENSION_XLSX = DOT + ExportType.XLSX;
export var EXTENSION_CSV = DOT + ExportType.CSV;
export var EXTENSION_JSON = DOT + ExportType.JSON;
export var EXTENSION_TEXT = DOT + ExportType.TXT;
export var MIME_EXCEL_XLS = new Mime(EXTENSION_XLS, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);
export var MIME_EXCEL_XLSX = new Mime(EXTENSION_XLSX, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);
export var MIME_JSON = new Mime(EXTENSION_JSON, CONTENT_TYPE_TEXT + JSON + CHAR_SET_UTF_8);
export var MIME_TXT = new Mime(EXTENSION_TEXT, CONTENT_TYPE_TEXT + ExportType.TXT + CHAR_SET_UTF_8);
export var MIME_CSV = new Mime(EXTENSION_CSV, CONTENT_TYPE_TEXT + ExportType.CSV + CHAR_SET_UTF_8);
export var REF = '!ref';
export var XLS_REGEX = DOT + '*\.' + ExportType.XLS + '$';
export var RETURN = '\n';
export var TAB = '\t';
export var XLSX_COLS = '!cols';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWluaS1jZGstdGFibGUtZXhwb3J0ZXIvIiwic291cmNlcyI6WyJsaWIvY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5QixNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDO0FBQ2xDLE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FBRyxlQUFlLENBQUM7QUFDNUMsTUFBTSxDQUFDLElBQU0sY0FBYyxHQUFHLFlBQVksR0FBRyxHQUFHLENBQUM7QUFDakQsTUFBTSxDQUFDLElBQU0saUJBQWlCLEdBQUcsVUFBVSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDdEQsTUFBTSxDQUFDLElBQU0sd0JBQXdCLEdBQUcsY0FBYyxDQUFDO0FBQ3ZELE1BQU0sQ0FBQyxJQUFNLGtCQUFrQixHQUFHLHdCQUF3QixHQUFHLGNBQWMsQ0FBQztBQUM1RSxNQUFNLENBQUMsSUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ3ZCLE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQztBQUNsRCxNQUFNLENBQUMsSUFBTSxjQUFjLEdBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7QUFDckQsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUFJLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDO0FBQ25ELE1BQU0sQ0FBQyxJQUFNLGNBQWMsR0FBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztBQUNyRCxNQUFNLENBQUMsSUFBTSxjQUFjLEdBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUM7QUFDcEQsTUFBTSxDQUFDLElBQU0sY0FBYyxHQUFHLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxrQkFBa0IsR0FBRyxjQUFjLENBQUMsQ0FBQztBQUMzRixNQUFNLENBQUMsSUFBTSxlQUFlLEdBQUcsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLGtCQUFrQixHQUFHLGNBQWMsQ0FBQyxDQUFDO0FBQzdGLE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLEdBQUcsSUFBSSxHQUFHLGNBQWMsQ0FBQyxDQUFDO0FBQzdGLE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLEdBQUcsVUFBVSxDQUFDLEdBQUcsR0FBRyxjQUFjLENBQUMsQ0FBQztBQUN0RyxNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxHQUFHLEdBQUcsY0FBYyxDQUFDLENBQUM7QUFDckcsTUFBTSxDQUFDLElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQztBQUMxQixNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxVQUFVLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUM1RCxNQUFNLENBQUMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQzNCLE1BQU0sQ0FBQyxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFDeEIsTUFBTSxDQUFDLElBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cG9ydFR5cGUgfSBmcm9tICcuL2V4cG9ydC10eXBlJztcbmltcG9ydCB7IE1pbWUgfSBmcm9tICcuL21pbWUnO1xuXG5leHBvcnQgY29uc3QgTUFUX1RBQkxFX0VYUE9SVEVSID0gJ21hdC10YWJsZS1leHBvcnRlcic7XG5leHBvcnQgY29uc3QgVFlQRV9BUlJBWSA9ICdhcnJheSc7XG5leHBvcnQgY29uc3QgQ0hBUl9TRVRfVVRGID0gJztjaGFyc2V0PXV0Zi0nO1xuZXhwb3J0IGNvbnN0IENIQVJfU0VUX1VURl84ID0gQ0hBUl9TRVRfVVRGICsgJzgnO1xuZXhwb3J0IGNvbnN0IENPTlRFTlRfVFlQRV9URVhUID0gRXhwb3J0VHlwZS5UWFQgKyAnLyc7XG5leHBvcnQgY29uc3QgQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OID0gJ2FwcGxpY2F0aW9uLyc7XG5leHBvcnQgY29uc3QgQ09OVEVOVF9UWVBFX0VYQ0VMID0gQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OICsgJ29jdGV0LXN0cmVhbSc7XG5leHBvcnQgY29uc3QgRE9UID0gJy4nO1xuZXhwb3J0IGNvbnN0IEVYVEVOU0lPTl9YTFMgPSBET1QgKyBFeHBvcnRUeXBlLlhMUztcbmV4cG9ydCBjb25zdCBFWFRFTlNJT05fWExTWCA9ICBET1QgKyBFeHBvcnRUeXBlLlhMU1g7XG5leHBvcnQgY29uc3QgRVhURU5TSU9OX0NTViA9ICBET1QgKyBFeHBvcnRUeXBlLkNTVjtcbmV4cG9ydCBjb25zdCBFWFRFTlNJT05fSlNPTiA9ICBET1QgKyBFeHBvcnRUeXBlLkpTT047XG5leHBvcnQgY29uc3QgRVhURU5TSU9OX1RFWFQgPSAgRE9UICsgRXhwb3J0VHlwZS5UWFQ7XG5leHBvcnQgY29uc3QgTUlNRV9FWENFTF9YTFMgPSBuZXcgTWltZShFWFRFTlNJT05fWExTLCBDT05URU5UX1RZUEVfRVhDRUwgKyBDSEFSX1NFVF9VVEZfOCk7XG5leHBvcnQgY29uc3QgTUlNRV9FWENFTF9YTFNYID0gbmV3IE1pbWUoRVhURU5TSU9OX1hMU1gsIENPTlRFTlRfVFlQRV9FWENFTCArIENIQVJfU0VUX1VURl84KTtcbmV4cG9ydCBjb25zdCBNSU1FX0pTT04gPSBuZXcgTWltZShFWFRFTlNJT05fSlNPTiwgQ09OVEVOVF9UWVBFX1RFWFQgKyBKU09OICsgQ0hBUl9TRVRfVVRGXzgpO1xuZXhwb3J0IGNvbnN0IE1JTUVfVFhUID0gbmV3IE1pbWUoRVhURU5TSU9OX1RFWFQsIENPTlRFTlRfVFlQRV9URVhUICsgRXhwb3J0VHlwZS5UWFQgKyBDSEFSX1NFVF9VVEZfOCk7XG5leHBvcnQgY29uc3QgTUlNRV9DU1YgPSBuZXcgTWltZShFWFRFTlNJT05fQ1NWLCBDT05URU5UX1RZUEVfVEVYVCArIEV4cG9ydFR5cGUuQ1NWICsgQ0hBUl9TRVRfVVRGXzgpO1xuZXhwb3J0IGNvbnN0IFJFRiA9ICchcmVmJztcbmV4cG9ydCBjb25zdCBYTFNfUkVHRVggPSBET1QgKyAnKlxcLicgKyBFeHBvcnRUeXBlLlhMUyArICckJztcbmV4cG9ydCBjb25zdCBSRVRVUk4gPSAnXFxuJztcbmV4cG9ydCBjb25zdCBUQUIgPSAnXFx0JztcbmV4cG9ydCBjb25zdCBYTFNYX0NPTFMgPSAnIWNvbHMnO1xuIl19